HOST: http://www.impspec.com/

--- IMP North: Ready ---


--
Some Notes

Interface definitions ready for implementation.
--



--
Business Area Info
--

# General Description
Get business area of a free-floating service (cars, bikes) by operator id

# Query Parameters
- currently none

# Selection criteria 
specified in the request body as described in the sample request 
- operatorId: id of the service operator (DriveNow, Car2Go_Berlin, etc.)

# Response
The business area of a service specified by `{operatorId}` as cunjunction of several polygons. 
Details for the EV charging station specified by `{id}`.
The data structure of the response contains the following attributes

attribute | json data type | comments
--- | --- | ---
operatorId or operator? | String |  (DriveNow, Car2Go_Berlin, NextBike, CallABike)
description | String |  
businessBoundary ? | businessBoundary | conjunction of disjunct polygons?


Please note: The accept-header of this request must be set to "image/png".
GET /api/V0/Info/BusinessArea
> Content-Type: application/json
> Accept: application/json
{ 
    "operator": "nextbike",
    "userId": "4711/10" 
}
< 200
< Content-Type: application/json
{  
    "businessBoundary": "some structure!",
}


--
Car Sharing
--

Description: Get list of available cars (offered as free-floating and/or station-based) in a specific region.

Query parameters: region of interest, currently specified by either

- lat={lat}&lng={lng}&radius={r}  (circle)

- left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}  (bounding box)

In both cases an optional parameter "system" can be added; the default is "WGS_84".

Returns: list of available car sharing locations, both free-floating and/or station-based.
In case of station-based cars, onle the URI of the Car Sharing station is returned; 
in case of free-floating cars, the URI to the car itself.

The data structure "CarSharingLocations" of the response is described in https://confluence.imp.mobilitaetsdienste.de/display/IMP/Resources+for+REST+North+Interface;
some parts of the data structure might be omitted because the information is not available.

GET /V0/Resources/CarSharing/All
< 200
< Content-Type: application/json
[
    {
        "description": "Handwerkervereinshaus / Sophienstraße",
        "type": "Stations",
        "url": "Resources/CarSharing/Stations/746",
        "location": {
            "latitude": 52.52561167074207,
            "longitude": 13.401126265525818,
            "system": "WGS_84"
        },
        "provider": "FlinksterDB",
        "operator": "FlinksterDB"
    },
    {
        "description": "B-GO2026",
        "type": "Cars",
        "url": "Resources/CarSharing/Cars/747",
        "location": {
            "latitude": 52.51526,
            "longitude": 13.39546,
            "system": "WGS_84"
        },
        "provider": "Car2Go",
        "operator": "Car2Go"
    }
]


Get floating cars.

Query parameters: region of interest, currently specified by either

- lat={lat}&lng={lng}&radius={r}  (circle)

- left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}  (bounding box)

In both cases an optional parameter "system" can be added; the default is "WGS_84".

Returns: all floating cars qualified by the circle, together with geo location, name, URI (to acquire further details) etc.
GET /V0/Resources/CarSharing/Cars
< 200
< Content-Type: application/json
[
    {
        "description": "B-GO2127",
        "type": "Cars",
        "url": "Resources/CarSharing/Cars/1",
        "location": {
            "latitude": 52.5218,
            "longitude": 13.39336,
            "system": "WGS_84"
        },
        "provider": "Car2Go",
        "operator": "Car2Go",
        "licenceId": "B-GO2127"
    },
    {
        "description": "B-GO3190",
        "type": "Cars",
        "url": "Resources/CarSharing/Cars/2",
        "location": {
            "latitude": 52.51936,
            "longitude": 13.40003,
            "system": "WGS_84"
        },
        "provider": "Car2Go",
        "operator": "Car2Go",
        "licenceId": "B-GO3190"
    }
]


Description: Get details about a car. 

Query parameters:  optional time frame

- from={datetime1}&to={datetime2} : time interval in the future 

Returns: details about selected car. 
Data structure "Car" is described in https://confluence.imp.mobilitaetsdienste.de/display/IMP/Resources+for+REST+North+Interface;
some parts of the data structure might be omitted because the information is not available.
GET /V0/Resources/CarSharing/Cars/{carId}
< 200
< Content-Type: application/json
{  
    "id": "WME4513341K581403",   
    "description": "B-GO2999", 
    "type": "Car", 
    "url": "/Resources/CarSharing/Cars/B-GO2999", 
    "address": { "cityCode": "13357", "city": "Berlin", "street": "Ellerbeker Straße", "houseNo": "7 - 8" }, 
    "location" : {  
            "latitude" : 52.55157,
            "longitude": 13.39552,
            "system": "WGS_84"
        },
    "licenceId": "B-GO2999",  
    "category": "Compact",
    "provider": "Car2Go",
    "model": "VW Caddy",
    "kW": { "value": 70, "unit":"KW" },
    "fee": [ ],
    "fuelType": "Petrol",
    "fuelLevel": 100,
    "expectedRange": { "value": 700, "unit":"km" },
    "transmission": "Automatic",
    "name": "",
    "imageLink": URI,
    "seatCount": 5,
    "doorCount": 3,
    "colour": "red",
    "properties": [ "Airbags", "Antiblockiersystem", "Ganzjahresreifen" ]
}



Description: Get list of car sharing stations (for station-based car sharing).

Query parameters: region of interest, currently specified by either 

- center_long={x}&center_lat={y}&radius={r} (circle),

- left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng} (bounding box),

  In both cases an optional parameter "system" can be added; the default is "WGS_84".

Opeator:

- operatorId={id} (optional)

Further restrictions are possible: category of required car (e.g., FullSize), pickup/return station

Returns: all stations qualified by query parameters, together with geo location, name, URI (to acquire further details) etc.;
The data structure "CarSharingStation" is described in https://confluence.imp.mobilitaetsdienste.de/display/IMP/Resources+for+REST+North+Interface;
some parts of the data structure might be omitted because the information is not available.
GET /V0/Resources/CarSharing/Stations
< 200
< Content-Type: application/json
[
    {
        "id":"id1", 
        "description":"Station1", 
        "location": { "longitude": 13.39552, "latitude":52.55157, system="WGS_84" }, 
        "address": { "cityCode": "13357", "city": "Berlin", "street": "Ellerbeker Straße", "houseNo": "7 - 8" },
        "phoneno": "...", "provider": "Flinkster",
        "url": "/Resources/CarSharing/Stations/1"
    }
]


Get car sharing station details.

Description: Get details about a specific car sharing station.

Query parameters: 

- currently none

Returns: details about car sharing station determined by {stationId}.

The data structure "CarSharingStationDetails" is described in https://confluence.imp.mobilitaetsdienste.de/display/IMP/Resources+for+REST+North+Interface;
some parts of the data structure might be omitted because the information is not available.
GET /V0/Resources/CarSharing/Stations/{stationId}
< 200
< Content-Type: application/json
{ 
    "id":"id1", 
    "description":"Station1", 
    "location": { "longitude": 13.39552, "latitude":52.55157, system="WGS_84" }, 
    "address": { "cityCode": "13357", "city": "Berlin", "street": "Ellerbeker Straße", "houseNo": "7 - 8" },
    "phoneno": "...", "provider": "Flinkster", 
    "services": [  ],
    "availableCars": [ ],
    "notes": [ "Die Stellplätze befinden sich hinter den Schönhauser Arcaden. Die Zufahrt erfolgt über die Schönhauser Allee, dann Wichertstraße in die Greifenhagener Straße.",
               "Die Stellplätze befinden sich direkt gegenüber vom Parkhaus - Schönhauser Arcaden- auf dem, mit Schrankenanlage versehenen Grundstück. Der Stellplatz ist frei wählbar. Sie öffnen die Schranke mit den Parkkarten im Fahrzeug. Bitte halten Sie zum Öffnen der Schranke die Parkkarte an das Lesefeld der Schrankenanlage." ],


}


Get availability at car sharing station.

Description: Get list of available cars at a specific car sharing station.

Query parameters: 

- from={datetime1}&to={datetime2} : time interval in the future 

Possible further parameters:

- station for returnal

- requested category

Returns: list of available cars at a specific car sharing station determined by {stationId}.

The data structure "CarDetails" is described in https://confluence.imp.mobilitaetsdienste.de/display/IMP/Resources+for+REST+North+Interface;
some parts of the data structure might be omitted because the information is not available.
GET /V0/Resources/CarSharing/Stations/{stationId}/Cars
< 200
< Content-Type: application/json
[
    {  
        "id": "WME4513341K581403",   
        "description": "B-GO2999", 
        "type": "Car", 
        "url": "/Resources/CarSharing/Cars/B-GO2999", 
        "address": { "cityCode": "13357", "city": "Berlin", "street": "Ellerbeker Straße", "houseNo": "7 - 8" }, 
        "location" : {  
                "latitude" : 52.55157,
                "longitude": 13.39552,
                "system": "WGS_84"
            },
        "licenceId": "B-GO2999",  
        "category": "Compact",
        "provider": "Car2Go"
    }    
]
  

Get details about a specific car. 

Query parameters: 

- currently none

Returns: details about a specific car determined by with {carId}
GET /V0/Resources/CarSharing/Cars/{carId}
< 200
< Content-Type: application/json
{  
    "id": "WME4513341K581403",   
    "description": "B-GO2999", 
    "type": "Car", 
    "url": "/Resources/CarSharing/Cars/B-GO2999", 
    "address": { "cityCode": "13357", "city": "Berlin", "street": "Ellerbeker Straße", "houseNo": "7 - 8" }, 
    "location" : {  
            "latitude" : 52.55157,
            "longitude": 13.39552,
            "system": "WGS_84"
        },
    "licenseId": "B-GO2405",
    "category": "Compact",
    "provider":"Car2Go",
    "model": "VW Caddy",
    "kW": { "value": 70, "unit":"KW" },
    "fee": [ ],
    "fuelType": "Petrol",
    "fuelLevel": 100,
    "expectedRange": { "value": 700, "unit":"km" },
    "transmission": "Automatic",
    "name": String,
    "imageLink": URI,
    "seatCount": 5,
    "doorCount": 3,
    "colour": "red",
    "properties": [ "Airbags", "Antiblockiersystem", "Ganzjahresreifen" ]
}

--
EV charging
--

List EV charging stations in a specific region: return list of stations with basic information.

Query parameters: 

region of interest, currently specified by either

- lat={lat}&lng={lng}&radius={r}  (circle)

- left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}  (bounding box)

  In both cases an optional parameter "system" can be added; the default is "WGS_84".

Returns: List of all EV charging stations qualified by query parameters (and body), together with geo location, name, URI (to acquire further details) etc.
The data structure "EVCHargingStation" of the response is described in https://confluence.imp.mobilitaetsdienste.de/display/IMP/Resources+for+REST+North+Interface;
some parts of the data structure might be omitted because the information is not available.

GET /V0/Resources/EVCharging/Stations
> Accept: application/json
< 200
< Content-Type: application/json
[
    {
        "description": "Conti",
        "type": "EVChargingStation",
        "url": "Resources/EVCharging/Stations/750",
        "location": {
            "latitude": 52.51474,
            "longitude": 13.38639,
            "system": "WGS_84"
        },
        "provider": "Vattenfall",
        "operator": "Vattenfall",
        "address": {
            "citycode": "10117",
            "city": "Berlin",
            "street": "Glinkastr.",
            "houseno": "38",
            "district": null,
            "region": null,
            "country": null
        }
    }
]


Description: Get details about an EV charging station.

Query parameters: 

- currently none

Returns: ChargingPoints for the EV charging station specified by {stationId}.
The data structure "EVChargingStationDetail" of the response is described in https://confluence.imp.mobilitaetsdienste.de/display/IMP/Resources+for+REST+North+Interface;
some parts of the data structure might be omitted because the information is not available.

GET /V0/Resources/EVCharging/Stations/{stationId}
< 200
< Content-Type: application/json
{ 
    "url": "/Resources/EVCharging/Stations/10",
    "description": "TOTAL-Tankstelle",
    "address": {
        "citycode": "10243", "city": "Berlin", "street": "Holzmarktstraße", "houseNo": "44" 
        },
    "location" : {  
        "latitude" : 52.5109368,
        "longitude": 13.4290864,
        "system": "WGS_84"
    },
    "provider": "Vatenfall",
    "chargingStationType": "Doppelsäule 16A",
    "managedChargeable": false, 
    "owner": "Vattenfall Halböffentlich",
    "PlugTypes": "Null", 
    "power": 11040,
    "voltage": 230,
    "properties": [ "current":16 ],
    "chargingPoints": [ 
        "/Resources/EVCharging/Stations/10/ChargingPoints/101",
        "/Resources/EVCharging/Stations/10/ChargingPoints/102"
    ]
}


--
Intermodal Route Planner
Intermodal Route Planner interfaces replace the former (Modal) Route Planner (Interfaces "POST /V0/TripProposals/", etc.)
Interfaces listed in this section provide a traveler with route using several modes of transport: Public Transport (bus, train, metro, etc.) and Individual Transport (car, walking, bicycle, etc.) 

--

# General Description
Finds trip proposals by specified trip criteria and returns the basic information about the proposals as overview over all alternatives.
NOTE: this is a POST request, it stores calculated trip proposals with all detailed information internally for a certain time
and returns only basic information as response. The current expiration time is 30 minutes,
afterwards stored proposals expire and details are no longer available.
To get more details about a certain proposal use "GET /V1/TripProposals/{proposalId}".


# Query Parameters
- `language`={lang} : de, en (de is the default)

# Body Parameters
Selection criteria (specified in the request body): 

- `origin`: start point specified by a geo location
  (addresses can be converted into geo locations by means of "GET V0/Resources/GeoLocations")

- `destination`: end point specified by a geo location

- `time` either orgin or destination might specify a time

- `viaPoints`: list of geo locations that the route should use

- `costFunction`: list of cost factors (such as Distance, Duration, ...), each with a percentual weight. 100% - constraint must be fulfilled, 0% constraint is not important.
"CostFunction" : { "Duration": Percentage, "Distance": Percentage, "Price": Percentage, "Emission": Percentage} currently implemented, Speed, Delay, Other are not yet implemented but planned}.
Example in VMZ request: <weightedCostsType costsType="Duration" weight="100.0"/> <weightedCostsType costsType="Eco" weight="10.0"/> <weightedCostsType costsType="Distance" weight="10.0"/> <weightedCostsType costsType="Price" weight="10.0"/>

- `trafficTypes`: list of either of Walk, Bike, Car, Taxi, Metro, CityTrain, Train, Bus, Tram, RegioTrain, Ferry, Other, Unknown

- `routingConstraints`: list of constraints to be taken into account for various traffic types, specified by min/max values. RoutingConstraintType = ENUM { "Duration", "Distance", "Price", "Eco", "Speed", "Delay", "Other" } 
Example: (“Walk”, "Distance", min=0 m, max=500 m) AND (“Metro”, "Duration", min=0 min, max=100 min)
Example from VMZ: <ns3:constraint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ns13:RoutingConstraint" type="Distance">
						<maxValue xmlns:ns15="http://vmzberlin.com/util/xsd/quantifiedvalue" xsi:type="ns15:LengthValue" value="1000.0" unit="Meter" quantity="Length"/>
						<trafficType>Walk</trafficType>
					</ns3:constraint>

- `useTrafficSituation` : boolean



The data structure of a trip request for such a JSON request body is described in the example.

# Response
List of "TripProposal"s with basic information such as distance, duration and an URI for detailed information.
The data structure of a trip proposal with basic information contains the following attributes:

attribute | json data type | comments
--- | --- | ---
url | URI  | URI for detaild information
origin | Object | start point of the trip {"location":Location, "address":Address, "time":Time}
destination | Object | end point of the trip {"location":Location, "address":Address, "time":Time}
trafficTypes | Array of Enums | list of values from ENUM { "Walk", "Bike", "Car", "Taxi", "Metro", "CityTrain", "Train", "Bus", "Tram", "RegioTrain", "Ferry", "Other" } 
description | String |
costs | Object | {"distanceFromOrigin":Distance, "duration":Duration, "price":Money, "emission":MassUnit}

Some parts of the data structure might be omitted because the information is not available.


POST /V1/TripProposals
> Content-Type: application/json
> Accept: application/json
{ 
    "origin": { 
        "location": { "longitude": 13.392155, "latitude": 52.453603, "system": "WGS84" }, 
        "time": "2014-01-20T19:00:11+0200"
        },
    "destination": { 
        "location": { "longitude": 13.448292, "latitude": 52.528976, "system": "WGS84" },
        "time": null
        },
    "viaPoints": [],
    "costFunctions": [],
    "trafficTypes": [ "Metro", "CityTrain", "Walk" ],
    "routingConstraints": [],
    "useTrafficSituation" : true
}
< 200
< Content-Type: application/json
[   {
        "url": "TripProposals/257918",
        "origin": {
            "location": {
                "latitude": 52.453603,
                "longitude": 13.392155,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-20T19:00:11+0200"
        },
        "destination": {
            "location": {
                "latitude": 52.528976,
                "longitude": 13.448292,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-20T19:51:00+0200"
        },
        "trafficTypes": [
            "Metro", "CityTrain", "Walk"
        ],
        "description": null,
        "costs": {
            "distanceFromOrigin": {
                "unit": "Meter",
                "value": 14934.23107925108
            },
            "duration": {
                "unit": "Second",
                "value": 2760.0
            },
            "price": {
                "unit": "EuroCent",
                "value": 260.0
            },
            "emission": {
                "unit": "Gram",
                "value": 314.5303148227748
            }
        }
    },
    {
        "url": "TripProposals/257920",
        "origin": {
            "location": {
                "latitude": 52.453603,
                "longitude": 13.392155,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-20T19:00:11+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.528976,
                "longitude": 13.448292,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-20T19:50:31+0100"
        },
        "trafficTypes": [
            "Walk", "Car"
        ],
        "description": null,
        "costs": {
            "distanceFromOrigin": {
                "unit": "Meter",
                "value": 13146.0
            },
            "duration": {
                "unit": "Second",
                "value": 2444.0
            },
            "price": {
                "unit": "Euro",
                "value": 8.809166666666668
            },
            "emission": {
                "unit": "Gram",
                "value": 2163.056
            }
        }
    }
] 

# General Description
Get details about a specific trip proposal determined by {proposalId}. PLEASE NOTE: Trip proposals must be stored internally by means of "POST /V1/TripProposals" before referencing a specific proposal using "GET /V1/TripProposals/{proposalId}".
The current expiration time is 30 minutes. Afterwards stored proposals expire and details are no longer available. 

# Query Parameters
- `language`={lang} : de, en (de is the default)

# Response
Detailed information about a single trip proposal determined by {proposalId}. 
Each trip proposal consists of several segments, one segment for one transportation modality such as bike, car, train, etc. There is also a separate segment if the traveler shall use different lines of the same transport modality, for instance, first U5 from A to B and then U4 from B to C.
Each segement has an origin and a destination with corresponding timestamps when to arrive and depart. Additionally a segment consists of a sequence of way points and guiding points. 
The data structure of a segment contains the segment id together with the basic information about the trip proposal (origin, destination, ...) and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
wayPoints | Array of Objects | [ Location ] A way point describes an intermediate geo location useful for displaying the trip proposal in a map
guidingPoints | Array of Objects  | [{ "description": String, "location": TimedLocation, "costs": Cost, "operator": String}, ...}] A guiding point gives a traveler hints how to travel, e.g., whenever to change the road at a crossing.


PLEASE NOTE: The "distanceFromOrigin"-value in the "costs" of a guidingPoint now counts the distance from guidingPoint to guidingPoint; the misleading name will be replaced soon. (In the past, the distanceFromOrigin-value accumulated the distance from the beginning of the trip.) 
  
GET /V1/TripProposals/{proposalId}
< 200
< Content-Type: application/json
{
    "url": "TripProposals/258393/",
    "segments": [
        {
            "segmentId": "1",
            "description": null,
            "origin": {
                "location": {
                    "latitude": 52.5091506,
                    "longitude": 13.3776613,
                    "system": "WGS_84"
                },
                "address": null,
                "time": "2013-07-23T15:10:00+0200"
            },
            "destination": {
                "location": {
                    "latitude": 52.5100021,
                    "longitude": 13.3841612,
                    "system": "WGS_84"
                },
                "address": null,
                "time": "2013-07-23T15:16:09+0200"
            },
            "trafficType": "Walk",
            "cost": {
                "distanceFromOrigin": {
                    "unit": "Meter",
                    "value": 505
                },
                "duration": {
                    "unit": "Second",
                    "value": 369
                },
                "price": null,
                "emission": null
            },
            "wayPoints": [
                {
                    "latitude": 52.50915,
                    "longitude": 13.37766,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.50924,
                    "longitude": 13.3775,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.50952,
                    "longitude": 13.37745,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.50956,
                    "longitude": 13.37776,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.50963,
                    "longitude": 13.37801,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.50971,
                    "longitude": 13.37963,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.51,
                    "longitude": 13.38416,
                    "system": "WGS_84"
                }
            ],
            "guidingPoints": [
                {
                    "description": "Head <b>northwest</b> on <b>Leipziger Platz</b> toward <b>B1</b>",
                    "location": {
                        "location": {
                            "latitude": 52.5091506,
                            "longitude": 13.3776613,
                            "system": "WGS_84"
                        },
                        "address": null,
                        "time": null
                    },
                    "cost": {
                        "distanceFromOrigin": {
                            "unit": "Meter",
                            "value": 46
                        },
                        "duration": {
                            "unit": "Second",
                            "value": 30
                        },
                        "price": null,
                        "emission": null
                    },
                    "operator": null
                },
                {
                    "description": "Turn <b>right</b> onto <b>Leipziger Platz/B1</b><div style=\"font-size:0.9em\">Continue to follow B1</div>",
                    "location": {
                        "location": {
                            "latitude": 52.5095168,
                            "longitude": 13.3774464,
                            "system": "WGS_84"
                        },
                        "address": null,
                        "time": null
                    },
                    "cost": {
                        "distanceFromOrigin": {
                            "unit": "Meter",
                            "value": 505
                        },
                        "duration": {
                            "unit": "Second",
                            "value": 369
                        },
                        "price": null,
                        "emission": null
                    },
                    "operator": null
                }
            ]
        }
        {
            "segmentId": "2"
        }
    ]
}