FORMAT: 1A

# IMP North: Ready

# Introduction

This is a description of rest interfaces ready to be implemented in IMP.

# Group Billing
This is a group of all rest resources related to IMP billing service.
IMP offers REST interface to Service Providers and Mobility Providers to post billable events to IMP in order to use its billing functionality.

## BillableEvent [/imp-endpoint/api/V1/Billing/BillableEvents/{id}]
One billable event. Can be a single time event (Buying a Ticket) or a event with end and start time (enter parking lot & exit parking lot)

The data structure of billable event has the following attributes:

attribute | json data type | comments
--- | --- | ---
eventId | String | id of the event. (auto incremented value)
timestamp | String | Timestamp when this event occurred  (mandatory)
userId | String | Id of customer to whom this event shall be accounted to  (mandatory). NOTE: This can be traveler id, mobilitly provider id, or a combined id, e.g. mp1_traveller2
transactionId | String | Unique id of this transaction (mandatory)
productCode | String | This code determined the consumed product and has effect on the rating and billing (mandatory)
productName | String | Public name of the product (optional)
vendorId | String | Id of entity that created this event (mandatory) NOTE: this can be MP_ID, SP_ID, or IMP
quantity | Float | Quantity of consumption (optional)
quantityType | String | Type of consumed quantity (e.g. units, seconds, kilometers, liters, …) (optional)
price | Float | Price of this event. If this field is filled the event is considered as already rated (optional)
extUserId | String | External Id of customer to whom this event shall be accounted (optional). NOTE: this field can be used as traveler id.
serviceId | Int | Id of the service that has been used to create this event (optional)
serviceProviderId | String | Id of the service provider (mandatory). NOTE: this field is SP_ID
quota | Object | optional object with more information about the event (optional)

The data structure of the quota object:

attribute | json data type | comments
--- | --- | ---
quotaId | long | id of the quota (auto incremented value)
quotaType | String | Defines the type of the quota. This shall be used in order to correctly cast the quota attributes.  (mandatory)
duration | long | A time dimension. Default unit: millis (optional)
startTimestamp | long | Start of the duration (optional)
endTimestamp | long | End of the duration (optional)
startLatLng | String | Start of distance measuring. Geoposition in format latitude|longitude (e.g. “14.567568|27.984234”) (optional)
endLatLng | String | End of distance measuring. Geoposition in format latitude|longitude (e.g. “14.567568|27.984234”) (optional)
distance  | Float | Distance in distance units determined by unit type. Default: meters (optional)
units | Float | Generic quota field (optional)
unitType | String | Determines unit type of the quota (meters, kg, hours, …) (optional)
namedEvent | String | Any kind of additional identification or description (optional)


+ Model (application/hal+json)
    
        {
            "eventId": 1,
            "eventTimestamp": 1410527427084,
            "extUserId": "cust1234",
            "price": 2.6,
            "productCode": "single fare",
            "productName": "Ticket",
            "quantity": 1.0,
            "quantityType": "ticket",
            "quota": {
              "distance": 50,
              "quotaId": 0,
              "quotaType": "distance",
              "unitType": "meters"
            },
            "serviceId": 1,
            "serviceProviderId": 1,
            "transactionId": 1,
            "userId": "henry@simobility.com",
            "vendorId": "100"
        }

### Retrieve a single billable event [GET]
@nottestable
Note: For internal IMP use only!

+ Parameters
    + id (string, `111`) ... an event id

+ Response 200
        [BillableEvent][]
  
     

## BillableEvents Collection [/imp-endpoint/api/V1/Billing/BillableEvents?userId={userId}&serviceProviderId={serviceProviderId}&startDate={date1}&endDate={date2}]  
A list of billable events happened in the specified date slot and filtered by userId (can be traveler id, mobility provider id or combined id "mp1_traveler2") or by serviceProviderIds (at least one is mandatory!)

Idea: Ids chain through MP->IMP->SP is realized as follows: a traveler at MP with `travelerId`, a MP at IMP with `mpId`, so the traveller at IMP with `mpId_travelerId`
All BillableEvents (produced in IMP) contain attribute userId in form `mpId_travelerId`, billableEvents provided by MPs, or SPs can provide different id schema

Note: userToken is used to check the right to see billable events.

+ Model (application/hal+json)

        [
          {
            "eventId": 1,
            "eventTimestamp": 1410527427084,
            "extUserId": "cust1234",
            "price": 2.6,
            "productCode": "single fare",
            "productName": "Ticket",
            "quantity": 1.0,
            "quantityType": "ticket",
            "quota": {
              "distance": 50,
              "quotaId": 0,
              "quotaType": "distance",
              "unitType": "meters"
            },
            "serviceId": 1,
            "serviceProviderId": 1,
            "transactionId": 1,
            "userId": "henry@simobility.com",
            "vendorId": "100"
          },
          {
            "eventId": 2,
            "eventTimestamp": 1410527429084,
            "extUserId": "cust9999",
            "productCode": "car park",
            "productName": "Parking Isartor",
            "quantity": 48.0,
            "quantityType": "time_minutes",
            "quota": {
              "duration": "45",
              "quotaId": 1,
              "quotaType": "duration",
              "unitType": "minutes"
            },
            "serviceId": 1,
            "serviceProviderId": 2,
            "transactionId": 1,
            "userId": "martha@simobility.com",
            "vendorId": "200"
          }
        ]


### List all BillableEvents [GET]
@nottestable
Note: for internam IMP use only

+ Parameters
    + userId (string, `mp1_traveler2`) ... Id of a user to whom events shall be accounted to. Has example value.   
    + serviceProviderId (string, `sp1`) ... Id of service provider. Has example value.   
    + date1 (required, string, `1410307200000`) ... start date in the history or in the future. Has example value. If the start and end dates are not specified the last month is taken.
    + date2 (required, string, `1418169600000`) ... end date in the history or in the future. Has example value.
    
+ Request

    + Headers
        
            userToken: {someTokenToCheckAuthentification} 
            
+ Response 200 (application/json)

        [BillableEvents Collection][]

## BillableEvents Collection [/imp-endpoint/api/V1/Billing/BillableEvents]  
    
### Create multiple BillableEvent [POST]
@nottestable
Can be used to post multiple events in one call.

+ Request (application/json)

        [
          {
            "eventTimestamp": 1410527427084,
            "extUserId": "cust1234",
            "price": 2.6,
            "productCode": "single fare",
            "productName": "Ticket",
            "quantity": 1.0,
            "quantityType": "ticket",
            "quota": {
              "distance": 50,
              "quotaId": 0,
              "quotaType": "distance",
              "unitType": "meters"
            },
            "serviceId": 1,
            "serviceProviderId": 1,
            "transactionId": 1,
            "userId": "henry@simobility.com",
            "vendorId": "100"
          },
          {
            "eventTimestamp": 1410527429084,
            "extUserId": "cust9999",
            "productCode": "car park",
            "productName": "Parking Isartor",
            "quantity": 48.0,
            "quantityType": "time_minutes",
            "quota": {
              "duration": "45",
              "quotaId": 1,
              "quotaType": "duration",
              "unitType": "minutes"
            },
            "serviceId": 1,
            "serviceProviderId": 2,
            "transactionId": 1,
            "userId": "martha@simobility.com",
            "vendorId": "200"
          },
          {
            "eventTimestamp": 1410527429194,
            "extUserId": "cust91",
            "productCode": "some park",
            "productName": "Parking Isartor",
            "quantity": 100.0,
            "quantityType": "EUR",
            "serviceId": 4,
            "serviceProviderId": 4,
            "transactionId": 7,
            "userId": "misterX@simobility.com",
            "vendorId": "208"
          }
        ]


+ Response 201

        []  
  
  
# Group Billing Invoices Draft
this is just a draft!

## Invoice [/imp-endpoint/api/V1/Billing/Invoices/{id}]
The invoice API is still under discussion! This is a first draft!
One invoice! Invoice lists all billable events together with price.

The data structure of the response has the following attributes:

attribute | json data type | comments
--- | --- | ---
invoiceId | String | 
billableEvents | List of BillableEvents | 
totalPrice | Number | 
unit | String | EUR


+ Model (application/hal+json)
    
        {
            "invoiceId": "1",
            "billableEvents":
            [
              {
                "eventId": 1,
                "eventTimestamp": 1410527427084,
                "extUserId": "cust1234",
                "price": 2.6,
                "productCode": "single fare",
                "productName": "Ticket",
                "quantity": 1.0,
                "quantityType": "ticket",
                "quota": {
                  "distance": 50,
                  "quotaId": 0,
                  "quotaType": "distance",
                  "unitType": "meters"
                },
                "serviceId": 1,
                "serviceProviderId": 1,
                "transactionId": 1,
                "userId": "henry@simobility.com",
                "vendorId": "100"
              },
              {
                "eventId": 2,
                "eventTimestamp": 1410527429084,
                "extUserId": "cust9999",
                "productCode": "car park",
                "productName": "Parking Isartor",
                "quantity": 48.0,
                "quantityType": "time_minutes",
                "quota": {
                  "duration": "45",
                  "quotaId": 1,
                  "quotaType": "duration",
                  "unitType": "minutes"
                },
                "serviceId": 1,
                "serviceProviderId": 2,
                "transactionId": 1,
                "userId": "martha@simobility.com",
                "vendorId": "200"
              }
            ]
          }

### Retrieve a single invoice [GET]
@nottestable

+ Parameters
    + id (string, `1`) ... invoice id

+ Response 200
        [Invoice][]

## Invoices Collection [/imp-endpoint/api/V1/Billing/Invoices?userId={userId}&spId={serviceProviderId}&startDate={date1}&endDate={date2}]  
Invoices created the specified date slot. userId or spId (or both) can be specified to filter events.

Note: userToken is used to check the right to see billable events!

+ Model (application/hal+json)

        [
            "invoice" : {
                "invoiceId": "1",
                "billableEvents":
                [
                  {
                    "eventId": 1,
                    "eventTimestamp": 1410527427084,
                    "extUserId": "cust1234",
                    "price": 2.6,
                    "productCode": "single fare",
                    "productName": "Ticket",
                    "quantity": 1.0,
                    "quantityType": "ticket",
                    "quota": {
                      "distance": 50,
                      "quotaId": 0,
                      "quotaType": "distance",
                      "unitType": "meters"
                    },
                    "serviceId": 1,
                    "serviceProviderId": 1,
                    "transactionId": 1,
                    "userId": "henry@simobility.com",
                    "vendorId": "100"
                  },
                  {
                    "eventId": 2,
                    "eventTimestamp": 1410527429084,
                    "extUserId": "cust9999",
                    "productCode": "car park",
                    "productName": "Parking Isartor",
                    "quantity": 48.0,
                    "quantityType": "time_minutes",
                    "quota": {
                      "duration": "45",
                      "quotaId": 1,
                      "quotaType": "duration",
                      "unitType": "minutes"
                    },
                    "serviceId": 1,
                    "serviceProviderId": 2,
                    "transactionId": 1,
                    "userId": "martha@simobility.com",
                    "vendorId": "200"
                  }
                ]
            }
            "invoice" : {
                "invoiceId": "2",
                "billableEvents":
                [
                    {
                        "eventId": 66,
                        "eventTimestamp": 1410527429084,
                        "extUserId": "cust9999",
                        "productCode": "car park",
                        "productName": "Parking Isartor",
                        "quantity": 48.0,
                        "quantityType": "time_minutes",
                        "quota": {
                          "duration": "20",
                          "quotaId": 1,
                          "quotaType": "duration",
                          "unitType": "minutes"
                        },
                        "serviceId": 1,
                        "serviceProviderId": 2,
                        "transactionId": 1,
                        "userId": "oxana@simobility.com",
                        "vendorId": "200"
                    }
                ]
            }
        ]

### List all Invoices [GET]
@nottestable

+ Parameters
    + userId (optional, string, `mp1_`) ... Id of customer to whom events shall be accounted to. can be a traveller, can be a mp with all his travellers. Has example value.   
    + spId (optional, string, `sp1`) ... Id of service provider who wants to see events about its service usage independand of customers. Has example value.   
    + date1 (optional, string, `1410307200000`) ... start date in the history or in the future. Has example value.
    + date2 (optional, string, `1418169600000`) ... end date in the history or in the future. Has example value.
    
+ Request

    + Headers
        
            userToken: {someTokenToCheckAuthentification} 
            
+ Response 200 (application/json)

        [Invoices Collection][]

### Create an Invoice [POST]
@nottestable

+ Request (application/json)

        {
            "startDate": "2014-07-10T14:23:11+0200",
            "endDate": "2014-08-10T14:23:11+0200"
            "userId": "mp1_traveler3_is_optional?",
            "spId": "driveNow_is_optional?"
        }

+ Response 201
    
    [Invoice][]  

        
# Group Heatmap
This is a group of all rest resources related to heatmap as PNG file. Heat map is a graphical representation of data where the individual values are represented as colors
Currently it is planned to be used to represent service categories: CarSharing, BikeSharing, Taxi Services

## TaxiService Demand Heatmap [/imp-endpoint/api/V1/Info/Heatmap/TaxiService/Demand?startDate={date1}&endDate={date2}&left_lower_lat={lllat}&left_lower_lng={lllng}&right_upper_lng={rulng}&right_upper_lat={rulat}&width={wdval}&height={htval}]  
Get WMS PNG file displaying Taxi Service Demand as a heatmap for a date slot and for a specific bounding box (place).
Note: Currently the returned image with dots represent events taking place in the specific area.

### Getting taxi service heatmap as PNG image [GET]
@nottestable

+ Parameters
    + date1 (required, string, `1410307200000`) ... start date in the history or in the future. Has example value.
    + date2 (required, string, `1418169600000`) ... end date in the history or in the future. Has example value.
    + lllng (required, string, `13.030338`) ...   
    + lllat (required, string, `52.38294`) ... 
    + rulng (required, string, `13.556067`) ... 
    + rulat (required, string, `52.638559`) ... 
    + width (required, string, `612`) ... the width of the heatmap
    + height (required, string, `512`) ... the height of the heatmap
    
+ Request

    + Headers
        
            accept: image/png 

+ Response 200 (image/png)

    + Body
    
            �PNG

## BikeSharing Heatmap [/imp-endpoint/api/V1/Info/Heatmap/BikeSharing?date={x}&left_lower_lat={lllat}&left_lower_lng={lllng}&right_upper_lng={rulng}&right_upper_lat={rulat}&operatorList={operatorList}]    
Get WMS PNG file for carsharing for a specific date, a specific bounding box (place) and for specific free-floating bikeSharing providers (NextBike, etc.)

### Getting heatmap as PNG image [GET]

+ Parameters
    + date (required, string, `1404892800000`) ... a date in the history (later also in the future) Has example value.
    + lllat (required, string, `52.482780222078205`) ... 
    + lllng (required, string, `13.3154296875`) ...     
    + rulng (required, string, `13.359375`) ... 
    + rulat (required, string, `52.50953477032729`) ... 
    + operatorList (optional, string, `NextBike,CallABike`) comma-separated list of BikeSharing operator ids. If not specified -> returns image for all available _BikeSharing_ operators

+ Request

    + Headers
        
            accept: image/png 

+ Response 200 (image/png)

    + Body
    
            �PNG



# Group Parking
This is a group of all parking related rest resources. Parking Garages & On-street Parking Vacancies

## On-street Parking Vacancies with Basic Info [/imp-endpoint/api/V1/Resources/Parking/OnStreetVacancies?lat={lat}&lng={lng}&radius={radius}?length={length}&width={width}&unit={unit}]    
This collection contains a list of all on-street vacansies in an area of interest specified by query parameters together with an URI to acquire more details about a specific vacancy.
TODO: the list contains only vacancies (FREE parking spots, no OCCUPIED parking spots!)
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT
TODO: Does not make sense now, but maybe in the future..

The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | List of available actions on this resource (currently empty, in the future can be subscribe for changes...)
id | Number | Internal parking spot identification number
description | String | description
type | String | (="OnStreetParkingVacancy" or similar) TODO
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  } 
provider | String | Parking service provider (usually equals operator)
operator | String | Parking space operator (usually equals provider)
category | ENUM | public, resident, handicapped

TODO: The following parameters are available in parking garages and should be discussed if they make sense in parking vacancies:

attribute | json data type | comments
--- | --- | ---
availability | Double | Availability in percentage
totalnumber | Object | Number of lots for different categories { "handicappedOnly":Int, "womenOnly":Int, "others":Int }
lottype | Enum | Type of garage {"Parkhaus", "Parkzone", "Tiefgarage", "Parkplatz"} 
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Sinceodified-Since header is passed in the request 

Parts of the data structure might be omitted if the information is not available. 
    
### Getting on-street parking vacancies [GET]
@nottestable

+ Parameters
    + lat (string, `52.52`) ... String `lat` latitude value. Has example value.
    + lng (string, `13.39`) ... String `lng` longitude value. Has example value.
    + radius (string, `1000`) ... String `radius` radius value. Has example value.
    + length (optional, string, `5`) ... String `length` required length value (car size). Has example value. If not defined a default value is used
    + width (optional, string, `2.5`) ... String `width` required width value (car size). Has example value. If not defined a default value is used
    + unit (optional, string, `m`) ... String `unit` measurement unit for the size value. Has example value. If not defined a default value is used
    
+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)   

        {
            "metaData": [
                {
                    "serviceAlias": "city2.e??",
                    "lastUpdateTime": "2014-07-10T11:11:04+0200",
                    "messages": []
                }
            ],
            "resources": [
                {
                    "actions": [],
                    "id": 270113,
                    "description": "Some description",
                    "type": "OnStreetParkingVacancy",
                    "uri": "Resources/Parking/OnStreetVacancies/270113",
                    "location": {
                        "latitude": 52.51908,
                        "longitude": 13.39094,
                        "system": "WGS_84"
                    },
                    "provider": "city2.e..",
                    "operator": "city2.e..",
                    "category": "handicapped"
                }
            ]
        }

## Parking Vacancy with Detailed Info [/imp-endpoint/api/V1/Resources/Parking/OnStreetVacancies/{id}]

A single parking vacancy object with Detailed Information. 
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
pricing | String | Price structure 
payment | Array | Payment options {COINPAY, BANKNOTEPAY, BANKCARDPAY, CREDICARDPAY, PREPAIDCARDPAY, PAYCARDPAY, DEBITPAY}
bookable | Boolean |  
allowedStay | Object | Allowed stay { "value": Number, "unit": String } 
restrictions | Array | Usage restrictions {"VisitorsOnly","GuestsOnly"}
services | Array | Special services { "WomenParking", "DisabledParking", "Monitored", "ChargingStation", "ParentChild", "MotorCycle", ... } 
securityComment | String |  Securtiy features

### Getting a specific parking vacancy [GET] 
@nottestable

+ Parameters
    + id (string, `8367`) ... String `id` as retrieved through *[/imp-endpoint/api/V1/Resources/Parking/OnStreetVacancies?lat={lat}&lng={lng}&radius={radius}]*

+ Response 200 (application/json) 

        {
            "actions": [],
            "id": 271366,
            "description": "Some description",
            "type": "OnStreetParkingVacancy",
            "uri": "Resources/Parking/OnStreetVacancies/270113",
            "location": {
                "latitude": 52.51908,
                "longitude": 13.39094,
                "system": "WGS_84"
            },
            "provider": "city2.e..",
            "operator": "city2.e..",
            "category": "handicapped",
            "pricing": "2,00 EUR für die 1. Std. <br>2. und 3. Stunde 1,50 Euro<br>je weiter Stunde 1,00 Euro<br>Tagespreis 15,00 Euro<br>Monatspreis 100,00 Euro",
            "payment": [
                "BANKNOTEPAY",
                "COINPAY"
            ],
            "bookable": false,
            "allowedStay": null,
            "restrictions": null,
            "services": null,
            "securityComment": null
        }


# Group Routing
This is a group of all routing related rest resources?

## One to many routes [/imp-endpoint/api/V1/TripProposals/XRouter_one2n]    
This collection contains trip proposals with basic information for specified trip criteria.
Note: the trip proposals can be multimodal or intermodal, depending on to which routing service the user is subscribed to.
Note: the trip proposals one to one or one to many: depending on to which routing service the user is subscribed to?
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
url | URI | URI to request more details
origin | Object | start point of the proposed trip
destination | Object | endpoint of the proposed trip
trafficTypes | Array | list of traffic types used in the proposed trip. Currently: Bike, Bus, Car, CityTrain, Ferry, Metro, Other, RegioTrain, Unknown, Train, Tram, Walk, UBahn. trafficType Other is used in the segments for car rental/parking
description | String | 
costs | Array | list of costs for the proposed trip
useBikeSharing | Boolean | use bike sharing services for routing [default: false]
useCarSharing | Boolean | use car sharing services for routing [default: false]
--- | --- | ---
ownVehicles | Object | 
--- | --- | ---
trafficType | Enum | Own vehicle type - Car / Bike
useParking | Boolean | Use parking for own vehicle 
useParkAndRide | Boolean | Use parking and ride for own vehicle 

    
+ Model (application/json)
        
        [
            {}
        ]
